"use client";
import {VideoOff} from "lucide-react";
import React, {useEffect, useState, useRef} from "react";
import TestAlerts from "@/app/(dashboard)/overview/_components/test-alerts";

export default function CameraModel() {

    const [cameraOn, setCameraOn] = useState(false);
    const [currentTime, setCurrentTime] = useState(() => new Date());
    const [error, setError] = useState<string | null>(null);
    const videoRef = useRef<HTMLVideoElement>(null);
    const streamRef = useRef<MediaStream | null>(null);

    useEffect(() => {
        const timer = setInterval(() => {
            setCurrentTime(new Date());
        }, 1000);

        return () => clearInterval(timer);
    }, []);

    useEffect(() => {
        let isSubscribed = true;

        const startCamera = async () => {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({
                    video: {
                        width: { ideal: 1920 },
                        height: { ideal: 1080 }
                    },
                    audio: false
                });

                if (!isSubscribed) {
                    stream.getTracks().forEach(track => track.stop());
                    return;
                }

                streamRef.current = stream;

                if (videoRef.current) {
                    videoRef.current.srcObject = stream;
                }

                if (isSubscribed) {
                    setError(null);
                }
            } catch (err) {
                console.error("Error accessing camera:", err);
                if (isSubscribed) {
                    setError("Failed to access camera. Please check permissions.");
                    setCameraOn(false);
                }
            }
        };

        const stopCamera = () => {
            if (streamRef.current) {
                streamRef.current.getTracks().forEach(track => track.stop());
                streamRef.current = null;
            }

            if (videoRef.current) {
                videoRef.current.srcObject = null;
            }
        };

        if (cameraOn) {
            startCamera();
        } else {
            stopCamera();
        }

        return () => {
            isSubscribed = false;
            stopCamera();
        };
    }, [cameraOn]);

    return (
        <>
            <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-4">
                    <div className="text-sm">
                        Status:{" "}
                        <span
                            className={`font-semibold ${
                                cameraOn ? "text-green-600" : "text-red-600"
                            }`}
                        >
                            {cameraOn ? "Active" : "Inactive"}
                        </span>
                    </div>
                    {error && (
                        <div className="text-xs text-red-600">
                            {error}
                        </div>
                    )}
                </div>
                <div className={"flex items-center gap-3"}>
                    <button
                        onClick={() => setCameraOn(!cameraOn)}
                        className={`px-4 py-2 font-medium text-white text-sm ${
                            cameraOn ? "bg-red-600 hover:bg-red-700" : "bg-green-600 hover:bg-green-700"
                        } transition-colors`}
                    >
                        {cameraOn ? "Turn Off Camera" : "Turn On Camera"}
                    </button>

                    <TestAlerts/>
                </div>
            </div>

            <div className="flex-1 border border-gray-300 flex items-center justify-center min-h-[500px] relative bg-black">
                {cameraOn ? (
                    <>
                        {/* Actual camera feed */}
                        <video
                            ref={videoRef}
                            autoPlay
                            playsInline
                            muted
                            className="w-full h-full object-cover"
                        />

                        {/* Metadata overlay at bottom */}
                        <div
                            className="absolute bottom-0 left-0 right-0 bg-black/70 text-white px-4 py-2 border-t border-gray-600">
                            <div className="flex items-center justify-between text-xs">
                                <div className="flex items-center gap-6">
                                    <div className="flex items-center gap-2">
                                        <span className="w-2 h-2 bg-red-600 rounded-full animate-pulse"></span>
                                        <span className="font-medium">REC</span>
                                    </div>
                                    <div>
                                        <span className="text-gray-400">Camera:</span> <span
                                        className="font-medium">CAM-01</span>
                                    </div>
                                    <div>
                                        <span className="text-gray-400">Location:</span> <span
                                        className="font-medium">Main Entrance</span>
                                    </div>
                                    <div>
                                        <span className="text-gray-400">Resolution:</span> <span
                                        className="font-medium">1920x1080</span>
                                    </div>
                                </div>
                                <div className="flex items-center gap-4">
                                    <div>
                                        <span className="text-gray-400">Date:</span> <span
                                        className="font-medium">{formatDate(currentTime)}</span>
                                    </div>
                                    <div>
                                        <span className="text-gray-400">Time:</span> <span
                                        className="font-medium">{formatTime(currentTime)}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </>
                ) : (
                    <div
                        className="w-full h-full border border-dashed border-gray-600 flex items-center justify-center">
                        <div className="flex flex-col items-center gap-3">
                            <VideoOff size={60} className="text-gray-400" strokeWidth={1}/>
                            <span className="text-base font-medium text-gray-400">
                                Camera is turned off
                            </span>
                        </div>
                    </div>
                )}
            </div>
        </>
    )
}

const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    });
};

const formatTime = (date: Date) => {
    return date.toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: true
    });
};